"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.S3DynamodbRemoteBackend = void 0;
// generated by cdktf get
// my-devops-way/s3-dynamodb-remote-backend/aws
const cdktf_1 = require("cdktf");
/**
* Defines an S3DynamodbRemoteBackend based on a Terraform module
*
* Docs at Terraform Registry: {@link https://registry.terraform.io/modules/my-devops-way/s3-dynamodb-remote-backend/aws/latest my-devops-way/s3-dynamodb-remote-backend/aws}
*/
class S3DynamodbRemoteBackend extends cdktf_1.TerraformModule {
    constructor(scope, id, config) {
        super(scope, id, {
            ...config,
            source: 'my-devops-way/s3-dynamodb-remote-backend/aws',
        });
        this.inputs = {};
        this.bucket = config.bucket;
        this.bucketPrefix = config.bucketPrefix;
        this.dynamodbTable = config.dynamodbTable;
        this.kmsMasterKeyId = config.kmsMasterKeyId;
    }
    get bucket() {
        return this.inputs['bucket'];
    }
    set bucket(value) {
        this.inputs['bucket'] = value;
    }
    get bucketPrefix() {
        return this.inputs['bucket_prefix'];
    }
    set bucketPrefix(value) {
        this.inputs['bucket_prefix'] = value;
    }
    get dynamodbTable() {
        return this.inputs['dynamodb_table'];
    }
    set dynamodbTable(value) {
        this.inputs['dynamodb_table'] = value;
    }
    get kmsMasterKeyId() {
        return this.inputs['kms_master_key_id'];
    }
    set kmsMasterKeyId(value) {
        this.inputs['kms_master_key_id'] = value;
    }
    get dynamodbTableNameOutput() {
        return this.getString('dynamodb_table_name');
    }
    get s3BucketIdOutput() {
        return this.getString('s3_bucket_id');
    }
    synthesizeAttributes() {
        return this.inputs;
    }
    synthesizeHclAttributes() {
        return Object.fromEntries(Object.entries(this.inputs)
            .filter(([, val]) => val !== undefined)
            .map(([key, val]) => {
            return [
                key,
                {
                    value: val,
                    type: "any",
                },
            ];
        }));
    }
}
exports.S3DynamodbRemoteBackend = S3DynamodbRemoteBackend;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiczMtZHluYW1vZGItcmVtb3RlLWJhY2tlbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzMy1keW5hbW9kYi1yZW1vdGUtYmFja2VuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx5QkFBeUI7QUFDekIsK0NBQStDO0FBQy9DLGlDQUFtRTtBQW9CbkU7Ozs7RUFJRTtBQUNGLE1BQWEsdUJBQXdCLFNBQVEsdUJBQWU7SUFFMUQsWUFBbUIsS0FBZ0IsRUFBRSxFQUFVLEVBQUUsTUFBcUM7UUFDcEYsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUU7WUFDZixHQUFHLE1BQU07WUFDVCxNQUFNLEVBQUUsOENBQThDO1NBQ3ZELENBQUMsQ0FBQztRQUxZLFdBQU0sR0FBNEIsRUFBRyxDQUFBO1FBTXBELElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUM1QixJQUFJLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUM7UUFDeEMsSUFBSSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDO1FBQzFDLElBQUksQ0FBQyxjQUFjLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQztJQUM5QyxDQUFDO0lBQ0QsSUFBVyxNQUFNO1FBQ2YsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBdUIsQ0FBQztJQUNyRCxDQUFDO0lBQ0QsSUFBVyxNQUFNLENBQUMsS0FBeUI7UUFDekMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxLQUFLLENBQUM7SUFDaEMsQ0FBQztJQUNELElBQVcsWUFBWTtRQUNyQixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUF1QixDQUFDO0lBQzVELENBQUM7SUFDRCxJQUFXLFlBQVksQ0FBQyxLQUF5QjtRQUMvQyxJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxHQUFHLEtBQUssQ0FBQztJQUN2QyxDQUFDO0lBQ0QsSUFBVyxhQUFhO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBVyxDQUFDO0lBQ2pELENBQUM7SUFDRCxJQUFXLGFBQWEsQ0FBQyxLQUFhO1FBQ3BDLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxLQUFLLENBQUM7SUFDeEMsQ0FBQztJQUNELElBQVcsY0FBYztRQUN2QixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQXVCLENBQUM7SUFDaEUsQ0FBQztJQUNELElBQVcsY0FBYyxDQUFDLEtBQXlCO1FBQ2pELElBQUksQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsR0FBRyxLQUFLLENBQUM7SUFDM0MsQ0FBQztJQUNELElBQVcsdUJBQXVCO1FBQ2hDLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFBO0lBQzlDLENBQUM7SUFDRCxJQUFXLGdCQUFnQjtRQUN6QixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLENBQUE7SUFDdkMsQ0FBQztJQUNTLG9CQUFvQjtRQUM1QixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQztJQUNTLHVCQUF1QjtRQUMvQixPQUFPLE1BQU0sQ0FBQyxXQUFXLENBQ3ZCLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQzthQUN4QixNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsS0FBSyxTQUFTLENBQUM7YUFDdEMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRTtZQUNsQixPQUFPO2dCQUNMLEdBQUc7Z0JBQ0g7b0JBQ0UsS0FBSyxFQUFFLEdBQUc7b0JBQ1YsSUFBSSxFQUFFLEtBQUs7aUJBQ1o7YUFDRixDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQ0wsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQTVERCwwREE0REMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBnZW5lcmF0ZWQgYnkgY2RrdGYgZ2V0XG4vLyBteS1kZXZvcHMtd2F5L3MzLWR5bmFtb2RiLXJlbW90ZS1iYWNrZW5kL2F3c1xuaW1wb3J0IHsgVGVycmFmb3JtTW9kdWxlLCBUZXJyYWZvcm1Nb2R1bGVVc2VyQ29uZmlnIH0gZnJvbSAnY2RrdGYnO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5leHBvcnQgaW50ZXJmYWNlIFMzRHluYW1vZGJSZW1vdGVCYWNrZW5kQ29uZmlnIGV4dGVuZHMgVGVycmFmb3JtTW9kdWxlVXNlckNvbmZpZyB7XG4gIC8qKlxuICAqIChPcHRpb25hbCwgRm9yY2VzIG5ldyByZXNvdXJjZSkgVGhlIG5hbWUgb2YgdGhlIGJ1Y2tldC4gSWYgb21pdHRlZCwgVGVycmFmb3JtIHdpbGwgYXNzaWduIGEgcmFuZG9tLCB1bmlxdWUgbmFtZS4gTXVzdCBiZSBsb3dlcmNhc2UgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byA2MyBjaGFyYWN0ZXJzIGluIGxlbmd0aC5cbiAgKi9cbiAgcmVhZG9ubHkgYnVja2V0Pzogc3RyaW5nO1xuICAvKipcbiAgKiAoT3B0aW9uYWwsIEZvcmNlcyBuZXcgcmVzb3VyY2UpIENyZWF0ZXMgYSB1bmlxdWUgYnVja2V0IG5hbWUgYmVnaW5uaW5nIHdpdGggdGhlIHNwZWNpZmllZCBwcmVmaXguIENvbmZsaWN0cyB3aXRoIGJ1Y2tldC4gTXVzdCBiZSBsb3dlcmNhc2UgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byAzNyBjaGFyYWN0ZXJzIGluIGxlbmd0aC5cbiAgKi9cbiAgcmVhZG9ubHkgYnVja2V0UHJlZml4Pzogc3RyaW5nO1xuICAvKipcbiAgKiAoUmVxdWlyZWQpIFRoZSBuYW1lIG9mIHRoZSB0YWJsZSwgdGhpcyBuZWVkcyB0byBiZSB1bmlxdWUgd2l0aGluIGEgcmVnaW9uLlxuICAqL1xuICByZWFkb25seSBkeW5hbW9kYlRhYmxlOiBzdHJpbmc7XG4gIC8qKlxuICAqIChPcHRpb25hbCkgVGhlIEFXUyBLTVMgbWFzdGVyIGtleSBJRCB1c2VkIGZvciB0aGUgU1NFLUtNUyBlbmNyeXB0aW9uLlxuICAqL1xuICByZWFkb25seSBrbXNNYXN0ZXJLZXlJZD86IHN0cmluZztcbn1cbi8qKlxuKiBEZWZpbmVzIGFuIFMzRHluYW1vZGJSZW1vdGVCYWNrZW5kIGJhc2VkIG9uIGEgVGVycmFmb3JtIG1vZHVsZVxuKlxuKiBEb2NzIGF0IFRlcnJhZm9ybSBSZWdpc3RyeToge0BsaW5rIGh0dHBzOi8vcmVnaXN0cnkudGVycmFmb3JtLmlvL21vZHVsZXMvbXktZGV2b3BzLXdheS9zMy1keW5hbW9kYi1yZW1vdGUtYmFja2VuZC9hd3MvbGF0ZXN0IG15LWRldm9wcy13YXkvczMtZHluYW1vZGItcmVtb3RlLWJhY2tlbmQvYXdzfVxuKi9cbmV4cG9ydCBjbGFzcyBTM0R5bmFtb2RiUmVtb3RlQmFja2VuZCBleHRlbmRzIFRlcnJhZm9ybU1vZHVsZSB7XG4gIHByaXZhdGUgcmVhZG9ubHkgaW5wdXRzOiB7IFtuYW1lOiBzdHJpbmddOiBhbnkgfSA9IHsgfVxuICBwdWJsaWMgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgY29uZmlnOiBTM0R5bmFtb2RiUmVtb3RlQmFja2VuZENvbmZpZykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCwge1xuICAgICAgLi4uY29uZmlnLFxuICAgICAgc291cmNlOiAnbXktZGV2b3BzLXdheS9zMy1keW5hbW9kYi1yZW1vdGUtYmFja2VuZC9hd3MnLFxuICAgIH0pO1xuICAgIHRoaXMuYnVja2V0ID0gY29uZmlnLmJ1Y2tldDtcbiAgICB0aGlzLmJ1Y2tldFByZWZpeCA9IGNvbmZpZy5idWNrZXRQcmVmaXg7XG4gICAgdGhpcy5keW5hbW9kYlRhYmxlID0gY29uZmlnLmR5bmFtb2RiVGFibGU7XG4gICAgdGhpcy5rbXNNYXN0ZXJLZXlJZCA9IGNvbmZpZy5rbXNNYXN0ZXJLZXlJZDtcbiAgfVxuICBwdWJsaWMgZ2V0IGJ1Y2tldCgpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLmlucHV0c1snYnVja2V0J10gYXMgc3RyaW5nIHwgdW5kZWZpbmVkO1xuICB9XG4gIHB1YmxpYyBzZXQgYnVja2V0KHZhbHVlOiBzdHJpbmcgfCB1bmRlZmluZWQpIHtcbiAgICB0aGlzLmlucHV0c1snYnVja2V0J10gPSB2YWx1ZTtcbiAgfVxuICBwdWJsaWMgZ2V0IGJ1Y2tldFByZWZpeCgpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLmlucHV0c1snYnVja2V0X3ByZWZpeCddIGFzIHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgfVxuICBwdWJsaWMgc2V0IGJ1Y2tldFByZWZpeCh2YWx1ZTogc3RyaW5nIHwgdW5kZWZpbmVkKSB7XG4gICAgdGhpcy5pbnB1dHNbJ2J1Y2tldF9wcmVmaXgnXSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyBnZXQgZHluYW1vZGJUYWJsZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmlucHV0c1snZHluYW1vZGJfdGFibGUnXSBhcyBzdHJpbmc7XG4gIH1cbiAgcHVibGljIHNldCBkeW5hbW9kYlRhYmxlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLmlucHV0c1snZHluYW1vZGJfdGFibGUnXSA9IHZhbHVlO1xuICB9XG4gIHB1YmxpYyBnZXQga21zTWFzdGVyS2V5SWQoKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5pbnB1dHNbJ2ttc19tYXN0ZXJfa2V5X2lkJ10gYXMgc3RyaW5nIHwgdW5kZWZpbmVkO1xuICB9XG4gIHB1YmxpYyBzZXQga21zTWFzdGVyS2V5SWQodmFsdWU6IHN0cmluZyB8IHVuZGVmaW5lZCkge1xuICAgIHRoaXMuaW5wdXRzWydrbXNfbWFzdGVyX2tleV9pZCddID0gdmFsdWU7XG4gIH1cbiAgcHVibGljIGdldCBkeW5hbW9kYlRhYmxlTmFtZU91dHB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmcoJ2R5bmFtb2RiX3RhYmxlX25hbWUnKVxuICB9XG4gIHB1YmxpYyBnZXQgczNCdWNrZXRJZE91dHB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmcoJ3MzX2J1Y2tldF9pZCcpXG4gIH1cbiAgcHJvdGVjdGVkIHN5bnRoZXNpemVBdHRyaWJ1dGVzKCkge1xuICAgIHJldHVybiB0aGlzLmlucHV0cztcbiAgfVxuICBwcm90ZWN0ZWQgc3ludGhlc2l6ZUhjbEF0dHJpYnV0ZXMoKTogeyBbbmFtZTogc3RyaW5nXTogYW55IH0ge1xuICAgIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoXG4gICAgICBPYmplY3QuZW50cmllcyh0aGlzLmlucHV0cylcbiAgICAgICAgLmZpbHRlcigoWywgdmFsXSkgPT4gdmFsICE9PSB1bmRlZmluZWQpXG4gICAgICAgIC5tYXAoKFtrZXksIHZhbF0pID0+IHtcbiAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICB2YWx1ZTogdmFsLFxuICAgICAgICAgICAgICB0eXBlOiBcImFueVwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdO1xuICAgICAgICB9KVxuICAgICk7XG4gIH1cbn1cbiJdfQ==